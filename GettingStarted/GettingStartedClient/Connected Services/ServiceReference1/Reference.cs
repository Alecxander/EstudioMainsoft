//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GettingStartedClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://microsoft.wcf.documentation", ConfigurationName="ServiceReference1.ISampleServiceAsincrono")]
    public interface ISampleServiceAsincrono {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microsoft.wcf.documentation/ISampleServiceAsincrono/SampleMethodAsincrono", ReplyAction="http://microsoft.wcf.documentation/ISampleServiceAsincrono/SampleMethodAsincronoR" +
            "esponse")]
        string SampleMethodAsincrono(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microsoft.wcf.documentation/ISampleServiceAsincrono/SampleMethodAsincrono", ReplyAction="http://microsoft.wcf.documentation/ISampleServiceAsincrono/SampleMethodAsincronoR" +
            "esponse")]
        System.Threading.Tasks.Task<string> SampleMethodAsincronoAsync(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microsoft.wcf.documentation/ISampleServiceAsincrono/SampleMethod", ReplyAction="http://microsoft.wcf.documentation/ISampleServiceAsincrono/SampleMethodResponse")]
        string SampleMethod(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microsoft.wcf.documentation/ISampleServiceAsincrono/SampleMethod", ReplyAction="http://microsoft.wcf.documentation/ISampleServiceAsincrono/SampleMethodResponse")]
        System.Threading.Tasks.Task<string> SampleMethodAsync(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microsoft.wcf.documentation/ISampleServiceAsincrono/ServiceAsyncMethod", ReplyAction="http://microsoft.wcf.documentation/ISampleServiceAsincrono/ServiceAsyncMethodResp" +
            "onse")]
        string ServiceAsyncMethod(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microsoft.wcf.documentation/ISampleServiceAsincrono/ServiceAsyncMethod", ReplyAction="http://microsoft.wcf.documentation/ISampleServiceAsincrono/ServiceAsyncMethodResp" +
            "onse")]
        System.Threading.Tasks.Task<string> ServiceAsyncMethodAsync(string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISampleServiceAsincronoChannel : GettingStartedClient.ServiceReference1.ISampleServiceAsincrono, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SampleServiceAsincronoClient : System.ServiceModel.ClientBase<GettingStartedClient.ServiceReference1.ISampleServiceAsincrono>, GettingStartedClient.ServiceReference1.ISampleServiceAsincrono {
        
        public SampleServiceAsincronoClient() {
        }
        
        public SampleServiceAsincronoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SampleServiceAsincronoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SampleServiceAsincronoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SampleServiceAsincronoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string SampleMethodAsincrono(string msg) {
            return base.Channel.SampleMethodAsincrono(msg);
        }
        
        public System.Threading.Tasks.Task<string> SampleMethodAsincronoAsync(string msg) {
            return base.Channel.SampleMethodAsincronoAsync(msg);
        }
        
        public string SampleMethod(string msg) {
            return base.Channel.SampleMethod(msg);
        }
        
        public System.Threading.Tasks.Task<string> SampleMethodAsync(string msg) {
            return base.Channel.SampleMethodAsync(msg);
        }
        
        public string ServiceAsyncMethod(string msg) {
            return base.Channel.ServiceAsyncMethod(msg);
        }
        
        public System.Threading.Tasks.Task<string> ServiceAsyncMethodAsync(string msg) {
            return base.Channel.ServiceAsyncMethodAsync(msg);
        }
    }
}
